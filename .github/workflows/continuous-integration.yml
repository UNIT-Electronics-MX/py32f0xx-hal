name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [thumbv6m-none-eabi]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        pip install pyocd
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check all features
      run: |
        cargo check --all-features --target ${{ matrix.target }}
        
    - name: Check individual features
      run: |
        # Check each device feature individually
        cargo check --features py32f030xx4 --target ${{ matrix.target }}
        cargo check --features py32f003xx4 --target ${{ matrix.target }}
        cargo check --features py32f003xx8 --target ${{ matrix.target }}
        cargo check --features py32f002ax5 --target ${{ matrix.target }}
        cargo check --features py32f002bx5 --target ${{ matrix.target }}

  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Run tests
      run: cargo test --lib

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv6m-none-eabi
        components: clippy
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run clippy
      run: |
        cargo clippy --all-features --target thumbv6m-none-eabi -- -D warnings

  format:
    name: Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
        
    - name: Check formatting
      run: cargo fmt --all -- --check

  examples:
    name: Build Examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [thumbv6m-none-eabi]
        feature: [py32f003xx4, py32f003xx8, py32f030xx4]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.feature }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build examples
      run: |
        # Build key examples for each feature
        cargo build --example blinky --features ${{ matrix.feature }} --target ${{ matrix.target }}
        cargo build --example serial_echo --features ${{ matrix.feature }} --target ${{ matrix.target }}
        cargo build --example serial_adc --features ${{ matrix.feature }} --target ${{ matrix.target }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv6m-none-eabi
        
    - name: Install mdBook
      run: |
        curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.37/mdbook-v0.4.37-x86_64-unknown-linux-gnu.tar.gz | tar -xz
        echo "$(pwd)" >> $GITHUB_PATH
        
    - name: Build Rust documentation
      run: |
        cargo doc --no-deps --all-features --target thumbv6m-none-eabi
        
    - name: Test mdBook documentation
      run: |
        cd docs
        mdbook test
        
    - name: Build mdBook documentation
      run: |
        cd docs
        mdbook build
